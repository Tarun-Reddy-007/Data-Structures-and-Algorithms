class Tree{
    Node root;
    
    Tree(){
        this.root = null;
    }
    
    void preorder(Node node){
        if(node != null){
            System.out.print(node.data + " --> ");
            preorder(node.left);
            preorder(node.right);
        }
    }
    
    void inorder(Node node){
        if(node != null){
            inorder(node.left);
            System.out.print(node.data + " --> ");
            inorder(node.right);
        }
    }
    
    void postorder(Node node){
        if(node != null){
            postorder(node.left);
            postorder(node.right);
            System.out.print(node.data + " --> ");
        }
    }
    
    public static void main(String[] args){
        Tree tree = new Tree();
        
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        
        tree.preorder(tree.root);
        System.out.println();
        tree.inorder(tree.root);
        System.out.println();
        tree.postorder(tree.root);
    }
}

class Node{
    int data;
    Node left, right;
    
    Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}


//Output

/*
class Tree{
    Node root;
    
    Tree(){
        this.root = null;
    }
    
    void preorder(Node node){
        if(node != null){
            System.out.print(node.data + " --> ");
            preorder(node.left);
            preorder(node.right);
        }
    }
    
    void inorder(Node node){
        if(node != null){
            inorder(node.left);
            System.out.print(node.data + " --> ");
            inorder(node.right);
        }
    }
    
    void postorder(Node node){
        if(node != null){
            postorder(node.left);
            postorder(node.right);
            System.out.print(node.data + " --> ");
        }
    }
    
    public static void main(String[] args){
        Tree tree = new Tree();
        
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        
        tree.preorder(tree.root);
        System.out.println();
        tree.inorder(tree.root);
        System.out.println();
        tree.postorder(tree.root);
    }
}

class Node{
    int data;
    Node left, right;
    
    Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

//Output

/*
1 --> 2 --> 4 --> 5 --> 3 --> 6 --> 7 --> 
4 --> 2 --> 5 --> 1 --> 6 --> 3 --> 7 --> 
4 --> 5 --> 2 --> 6 --> 7 --> 3 --> 1 -->
*/
