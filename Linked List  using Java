class LinkedList{
    Node head;
    void insertAtBeginning(int data){
        Node newNode = new Node(data);
        newNode.next=head;
        head=newNode;
    }
    void insertAtEnd(int data){
        Node newNode = new Node(data);
        if(head==null){
            head=newNode;
        }
        else{
            Node temp = head;
            while(temp.next != null){
                temp=temp.next;
            }
            temp.next = newNode;
        }
    }
    int getLength(){
        if(head==null){
            return 0;
        }
        else{
            int len=1;
            Node temp = head;
            while(temp.next != null){
                len++;
                temp=temp.next;
            }
            return len;
        }
    }
    void insertAtPos(int data, int pos){
        Node newNode = new Node(data);
        if(pos > getLength()){
            System.out.println("The position exceeds the length of the list. The data is added to the end of the Linked List.");
            insertAtEnd(data);
        }
        else if(pos==0 || pos==1){
            insertAtBeginning(data);
        }
        else{
            Node temp = head;
            int cur=1;
            while(cur!=pos-1){
                temp = temp.next;
                cur++;
            }
            newNode.next = temp.next;
            temp.next=newNode;
        }
    }
    void delete(int data){
        if(head == null){
            System.out.println("Linked List is Empty.");
        }
        else if(head.data == data){
           head=head.next; 
        }
        else{
            Node temp = head;
            while(temp.next != null && data != temp.next.data){
                temp = temp.next;
            }
            if(temp.next != null){
                temp.next=temp.next.next;
            }
            else{
                System.out.println("Data to delete not found.");
            }
        }
    }
    void display(){
        if(head==null){
            System.out.println("Linked List is empty.");
        }
        else{
            Node temp = head;
            while(temp!=null){
                System.out.print(temp.data + " --> ");
                temp=temp.next;
            }
            System.out.print("Null");
        }
        System.out.println();
    }
    void deleteHead(){
        if(head==null){
            System.out.println("Linked List is Empty.");
        }
        else if(head.next==null){
            head=null;
        }
        else{
            head=head.next;
        }
    }
    void deleteEnd(){
        if(head==null){
            System.out.println("Linked List is Empty.");
        }
        else{
            Node temp = head;
            while(temp.next.next != null){
                temp = temp.next;
            }
            temp.next = null;
        }
    }
    void deleteByPos(int pos){
        if(head==null){
            System.out.println("The Linked List is empty.");
        }
        else if(pos==1 || pos == 0){
            head = null;
        }
        else if(pos>getLength()){
            System.out.println("Position is exceeding the length of the Linked List. Element at the end is deleted.");
            deleteEnd();
        }
        else{
            Node temp = head;
            int cur = 1;
            while(cur != pos-1){
                temp = temp.next;
            }
            temp.next=temp.next.next;
        }
    }
    
    void search(int data){
        if(head==null){
            System.out.println("Linked List is empty.");
        }
        else{
            int sea = 1;
            Node temp = head;
            while(temp.next!=null && temp.data != data){
                temp = temp.next;
                sea++;
            }
            if(temp.data==data){
                System.out.println("Element found at position : " + sea);
            }
        }
    }
    public static void main(String[] args){
        LinkedList SLL = new LinkedList();
        SLL.insertAtBeginning(1);
        SLL.display();
        SLL.insertAtEnd(3);
        SLL.display();
        SLL.insertAtPos(2,2);
        SLL.display();
        SLL.delete(2);
        SLL.display();
        SLL.insertAtPos(2,2);
        SLL.display();
        SLL.deleteHead();
        SLL.display();
        SLL.deleteEnd();
        SLL.display();
        SLL.insertAtBeginning(1);
        SLL.display();
        SLL.insertAtEnd(3);
        SLL.display();
        SLL.insertAtEnd(4);
        SLL.display();
        SLL.deleteByPos(2);
        SLL.display();
        SLL.insertAtPos(2,2);
        SLL.display();
        SLL.search(2);
    }
}

class Node{
    int data;
    Node next;
    Node(int data){
        this.data=data;
        this.next=null;
    }
}


//Output

/*1 --> Null
1 --> 3 --> Null
1 --> 2 --> 3 --> Null
1 --> 3 --> Null
1 --> 2 --> 3 --> Null
2 --> 3 --> Null
2 --> Null
1 --> 2 --> Null
1 --> 2 --> 3 --> Null
1 --> 2 --> 3 --> 4 --> Null
1 --> 3 --> 4 --> Null
1 --> 2 --> 3 --> 4 --> Null
Element found at position : 2*/
