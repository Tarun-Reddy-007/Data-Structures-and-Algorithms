import java.util.LinkedList;

class Graph{
    int numvertices;
    LinkedList<Integer>[] adlist;
    
    Graph(int numvertices){
        this.numvertices=numvertices;
        this.adlist = new LinkedList[5];
        
        for(int i = 0; i < numvertices; i++){
            adlist[i] = new LinkedList<>();
        }
    }
    
    void insert(int src, int des){
        adlist[src].add(des);
    }
    
    void bfs(int startvertex){
        boolean[] visited = new boolean[numvertices];
        LinkedList<Integer> queue = new LinkedList<>();
        
        visited[startvertex]=true;
        queue.add(startvertex);
        
        while(!queue.isEmpty()){
            int vertex = queue.poll();
            System.out.print(vertex + " --> ");
            
            for(int adjver : this.adlist[vertex]){
                if(!visited[adjver]){
                    queue.add(adjver);
                    visited[adjver] = true;
                }
            }
        }
    }
    public static void main(String[] args){
        Graph graph = new Graph(5);
        
        graph.insert(0,1);
        graph.insert(0,2);
        graph.insert(0,3);
        graph.insert(1,2);
        graph.insert(1,4);
        graph.insert(2,3);
        graph.insert(3,1);
        graph.insert(3,4);
        graph.insert(4,2);
        
        graph.bfs(0);
    }
}

//Output

/*
0 --> 1 --> 2 --> 3 --> 4 --> 
*/
