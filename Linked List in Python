class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self):
        self.head = None
    
    def insert_at_beginning(self, data):
        node = Node(data, self.head)
        self.head = node
        
    def insert_values(self, data):
        for data in data:
            self.insert_at_end(data)
        
    def insert_at_end(self,data):
        if self.head is None:
            self.head = Node(data, None)
            return
        else:
            itr=self.head
            while itr.next:
                itr=itr.next
            itr.next=Node(data, None)
    
    def length(self):
        itr=self.head
        count=0
        while itr:
            itr=itr.next
            count+=1
        return count
    
    def insert_at(self,data,pos):
        if pos==0:
            self.insert_at_beginning(data)
            return
        i=1
        itr=self.head
        while i<pos-1:
            itr=itr.next
            i+=1
        itr.next=Node(data, itr.next)
        
    def remove_at(self, pos):
        if pos<0 or pos>self.length():
            raise Exception("Invalid Index")
            return
        
        if pos==0:
            self.head=self.head.next
        
        itr=self.head
        count=1
        while count<pos-1:
            itr=itr.next
            count+=1
        itr.next=itr.next.next
            
    
    def print(self):
        if self.head is None:
            print("Linked List is empty.")
            return
        
        itr = self.head
        llstr = ''
        
        while itr:
            llstr += str(itr.data) + '-->'
            itr = itr.next
        
        print(llstr)
        
if __name__ == '__main__':
    ll = LinkedList()
    ll.insert_at_beginning(5)
    ll.insert_at_beginning(89)
    ll.insert_at_end(45)
    ll.insert_at_end(54)
    ll.insert_at(34,2)
    ll.insert_at(65,3)
    ll.insert_values([32,59,10,6])
    ll.remove_at(2)
    ll.print()
    print(ll.length())
